name: Build and release ðŸš€
on:
  push:
    branches: [master]
jobs:
  build-release:
    runs-on: macos-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v1
      - name: Install the Apple certificate and provisioning profile
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }} # Certificate to sign the app in base64
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }} # Password of the certificate
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }} # Provisioning profile in base64
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }} # Password of the keychain (can be anything)
        run: |
          # Create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # Import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH

          # Create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # Import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          # Apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles
      - name: Show Xcode version
        run: xcode-select -p
      - name: Build workspace archive
        run: xcodebuild -workspace "./{YOUR_APP_NAME}.xcworkspace" -scheme "{YOUR_APP_NAME}" -archivePath "./archives/archive.xcarchive" archive -destination "generic/platform=iOS"
      - uses: actions/upload-artifact@v3
        with:
          name: archive
          path: ./archives/archive.xcarchive
      - name: Export archive and build IPA
        run: xcodebuild -exportArchive -archivePath "./archives/archive.xcarchive" -exportPath "./output" -exportOptionsPlist ./export.plist
      - uses: actions/upload-artifact@v3
        with:
          name: ipa
          path: ./output
      - name: Wolfia Deploy
        uses: wolfia-app/wolfia-deploy@v0.0.12
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }} # GitHub token automatically provided by GitHub
          wolfia-api-key-id: ${{ vars.WOLFIA_API_KEY_ID }} # Wolfia API key ID can be created or found in the Wolfia settings
          wolfia-api-key-secret: ${{ secrets.WOLFIA_API_KEY_SECRET }} # Wolfia API key secret can be created or found in the Wolfia settings
          app-path: "./output/{YOUR_APP_NAME}.ipa"
          distribution-method: QR_CODE
          bundle-id: ï¼Ÿ
      - name: Clean up (Delete keychain and provisioning profile)
        if: ${{ always() }}
        run: |
          security delete-keychain $RUNNER_TEMP/app-signing.keychain-db
          rm ~/Library/MobileDevice/Provisioning\ Profiles/build_pp.mobileprovision
